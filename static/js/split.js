// const data = `
// 03:11:31.093734 IP6 localhost.55752 > localhost.8303: UDP, length 21
//         0x0000:  6004 33b1 001d 1140 0000 0000 0000 0000  x.3....@........
//         0x0010:  0000 0000 0000 0001 0000 0000 0000 0000  ................
//         0x0020:  0000 0000 0000 0001 d9c8 206f 001d 0030  ...........o...0
//         0x0030:  100f 0126 3e5a 3755 e948 e767 e7cc cf6e  ...&>Z7U.H.g...n
//         0x0040:  8dff 10c5 0d                             .....
// 03:11:31.106564 IP6 localhost.8303 > localhost.55752: UDP, length 21
//         0x0000:  600a a56d 001d 1140 0000 0000 0000 0000  x..m...@........
//         0x0010:  0000 0000 0000 0001 0000 0000 0000 0000  ................
//         0x0020:  0000 0000 0000 0001 206f d9c8 001d 0030  .........o.....0
//         0x0030:  0019 0223 ec92 0300 0515 9ea0 050c 0005  ...#............
//         0x0040:  0f9e a005 02                             .....
// 03:11:31.128677 IP6 localhost.55752 > localhost.8303: UDP, length 8
//         0x0000:  6004 33b1 0010 1140 0000 0000 0000 0000  x.3....@........
//         0x0010:  0000 0000 0000 0001 0000 0000 0000 0000  ................
//         0x0020:  0000 0000 0000 0001 d9c8 206f 0010 0023  ...........o...#
//         0x0030:  040f 0026 3e5a 3704                      ...&>Z7.
// `

// [
// 	  '',
// 	  '\n',
// 	  '6',
// 	  '\n',
// 	  '        0x0000:  6004 33b1 001d 1140 0000 0000 0000 0000  x.3....@........\n' +
// 	    '        0x0010:  0000 0000 0000 0001 0000 0000 0000 0000  ................\n' +
// 	    '        0x0020:  0000 0000 0000 0001 d9c8 206f 001d 0030  ...........o...0\n' +
// 	    '        0x0030:  100f 0126 3e5a 3755 e948 e767 e7cc cf6e  ...&>Z7U.H.g...n\n' +
// 	    '        0x0040:  8dff 10c5 0d                             .....',
// 	  '\n',
// 	  '6',
// 	  '\n',
// 	  '        0x0000:  600a a56d 001d 1140 0000 0000 0000 0000  x..m...@........\n' +
// 	    '        0x0010:  0000 0000 0000 0001 0000 0000 0000 0000  ................\n' +
// 	    '        0x0020:  0000 0000 0000 0001 206f d9c8 001d 0030  .........o.....0\n' +
// 	    '        0x0030:  0019 0223 ec92 0300 0515 9ea0 050c 0005  ...#............\n' +
// 	    '        0x0040:  0f9e a005 02                             .....',
// 	  '\n',
// 	  '6',
// 	  '\n',
// 	  '        0x0000:  6004 33b1 0010 1140 0000 0000 0000 0000  x.3....@........\n' +
// 	    '        0x0010:  0000 0000 0000 0001 0000 0000 0000 0000  ................\n' +
// 	    '        0x0020:  0000 0000 0000 0001 d9c8 206f 0010 0023  ...........o...#\n' +
// 	    '        0x0030:  040f 0026 3e5a 3704                      ...&>Z7.\n'
// ]

/**
 * @param {string} data hexdump userinput
 * @returns {string[]|null}
 */
const getTcpDumpSplits = (data) => {
  // splits on this
  // 03:11:31.128677 IP6 localhost.55752 > localhost.8303: UDP, length 8
  const tcpdumpSplits = data.split(/(^|\n|\r|\r\n)\d\d:\d\d:\d\d\.\d+ IP(6|4)? [^:]+>[^:]+: UDP, length \d+($|\n|\r|\r\n)/)

  if (tcpdumpSplits.length <= 0) {
    return null
  }

  // ensures entries start with
  // 0x0030:
  const tcpdumpSplitsValid = tcpdumpSplits.filter((split) => /^\s+0x\d{4}:\s/.test(split))
  if (tcpdumpSplitsValid.length <= 0) {
    return null
  }

  // tcpdumpSplitsValid.forEach((split) => {
  //   console.log('---')
  //   console.log(split)
  // })

  return tcpdumpSplitsValid
}
